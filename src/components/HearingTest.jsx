import { useState, useRef, useEffect } from 'react';
import styles from './HearingTest.module.scss';

const HearingTest = ({ onNext, onBack }) => {
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
  const FREQUENCIES = [250, 500, 1000, 1500, 2000, 8000];
  const DB_LEVELS = [-10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120];
  const EARS = ['left', 'right'];

  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [currentEarIndex, setCurrentEarIndex] = useState(0);
  const [currentFrequencyIndex, setCurrentFrequencyIndex] = useState(0);
  const [currentDbLevel, setCurrentDbLevel] = useState(8); // 30 –¥–ë (–∏–Ω–¥–µ–∫—Å 8 –≤ –º–∞—Å—Å–∏–≤–µ)
  const [isPlaying, setIsPlaying] = useState(false);
  const [searchingDown, setSearchingDown] = useState(true); // –§–ª–∞–≥: –∏—â–µ–º –ø–æ—Ä–æ–≥ "—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑"
  const [results, setResults] = useState({
    left: {},
    right: {}
  });

  // Refs –¥–ª—è Web Audio API
  const audioContextRef = useRef(null);
  const oscillatorRef = useRef(null);
  const gainNodeRef = useRef(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Audio Context
  useEffect(() => {
    audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();

    return () => {
      if (audioContextRef.current) {
        audioContextRef.current.close();
      }
    };
  }, []);

  // –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  const currentEar = EARS[currentEarIndex];
  const currentFrequency = FREQUENCIES[currentFrequencyIndex];
  const currentDb = DB_LEVELS[currentDbLevel];

  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —á–∞—Å—Ç–æ—Ç
  const totalTests = FREQUENCIES.length * EARS.length;
  const completedTests = Object.keys(results.left).length + Object.keys(results.right).length;

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ dB –≤ gain
  const dbToGain = (db) => {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω [-10, 120] –≤ [0, 1]
    // -10 dB -> –æ—á–µ–Ω—å —Ç–∏—Ö–æ (gain = 0.01)
    // 120 dB -> –º–∞–∫—Å–∏–º—É–º (gain = 1)
    const normalized = (db + 10) / 130; // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É [0, 1]
    return Math.max(0.01, Math.min(1, normalized));
  };

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞
  const playSound = () => {
    if (!audioContextRef.current) return;

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–≤—É–∫
    stopSound();

    const audioContext = audioContextRef.current;

    // –°–æ–∑–¥–∞—ë–º –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä
    const oscillator = audioContext.createOscillator();
    oscillator.type = 'sine';
    oscillator.frequency.setValueAtTime(currentFrequency, audioContext.currentTime);

    // –°–æ–∑–¥–∞—ë–º gain node
    const gainNode = audioContext.createGain();
    const gain = dbToGain(currentDb);
    gainNode.gain.setValueAtTime(gain, audioContext.currentTime);

    // –°–æ–∑–¥–∞—ë–º panner –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ö–∞
    const panner = audioContext.createStereoPanner();
    panner.pan.setValueAtTime(currentEar === 'left' ? -1 : 1, audioContext.currentTime);

    // –°–æ–µ–¥–∏–Ω—è–µ–º —É–∑–ª—ã
    oscillator.connect(gainNode);
    gainNode.connect(panner);
    panner.connect(audioContext.destination);

    // –ó–∞–ø—É—Å–∫–∞–µ–º
    oscillator.start();

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã (–ø—Ä–µ—Ä—ã–≤–∏—Å—Ç—ã–π –∑–≤—É–∫)
    oscillator.stop(audioContext.currentTime + 1.5);

    oscillatorRef.current = oscillator;
    gainNodeRef.current = gainNode;
    setIsPlaying(true);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ isPlaying —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      setIsPlaying(false);
    }, 1500);
  };

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–≤—É–∫–∞
  const stopSound = () => {
    if (oscillatorRef.current) {
      try {
        oscillatorRef.current.stop();
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
      }
      oscillatorRef.current = null;
    }
    gainNodeRef.current = null;
    setIsPlaying(false);
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  useEffect(() => {
    if (completedTests < totalTests) {
      playSound();

      return () => {
        stopSound();
      };
    }
  }, [currentFrequency, currentDb, currentEar, completedTests]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ù–µ —Å–ª—ã—à—É"
  const handleNotHeard = () => {
    stopSound();

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–µ–∂–∏–º "–ø–æ–∏—Å–∫–∞ —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö"
    setSearchingDown(false);

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞ +5 dB (—à–∞–≥ 1 –≤ –º–∞—Å—Å–∏–≤–µ —Å —à–∞–≥–æ–º 5 –¥–ë)
    if (currentDbLevel < DB_LEVELS.length - 1) {
      setCurrentDbLevel(currentDbLevel + 1);
    } else {
      // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º—É–º–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ
      saveThresholdAndMoveNext();
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–°–ª—ã—à—É"
  const handleHeard = () => {
    stopSound();

    // –ï—Å–ª–∏ –∏—â–µ–º –ø–æ—Ä–æ–≥ "—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑" (–µ—â—ë –Ω–µ –±—ã–ª–æ "–ù–µ —Å–ª—ã—à—É")
    if (searchingDown) {
      // –ü–æ–Ω–∏–∂–∞–µ–º –Ω–∞ 10 –¥–ë (—à–∞–≥ 2 –≤ –º–∞—Å—Å–∏–≤–µ —Å —à–∞–≥–æ–º 5 –¥–ë: 5*2=10)
      const newDbLevel = currentDbLevel - 2;

      if (newDbLevel >= 0) {
        setCurrentDbLevel(newDbLevel);
      } else {
        // –î–æ—Å—Ç–∏–≥–ª–∏ –º–∏–Ω–∏–º—É–º–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–Ω–∏–∑ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        setCurrentDbLevel(0);
        saveThresholdAndMoveNext();
      }
    } else {
      // –ï—Å–ª–∏ —É–∂–µ –±—ã–ª —Ä–µ–∂–∏–º "—Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö" (–±—ã–ª–æ "–ù–µ —Å–ª—ã—à—É"), —Ç–æ –Ω–∞—à–ª–∏ –ø–æ—Ä–æ–≥
      saveThresholdAndMoveNext();
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–æ—Ç–µ
  const saveThresholdAndMoveNext = () => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const newResults = { ...results };
    newResults[currentEar][currentFrequency] = currentDb;
    setResults(newResults);

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–æ—Ç–µ
    if (currentFrequencyIndex < FREQUENCIES.length - 1) {
      setCurrentFrequencyIndex(currentFrequencyIndex + 1);
      setCurrentDbLevel(8); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ 30 –¥–ë (–∏–Ω–¥–µ–∫—Å 8)
      setSearchingDown(true); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
    } else {
      // –ï—Å–ª–∏ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ö—É
      if (currentEarIndex < EARS.length - 1) {
        setCurrentEarIndex(currentEarIndex + 1);
        setCurrentFrequencyIndex(0);
        setCurrentDbLevel(8); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ 30 –¥–ë (–∏–Ω–¥–µ–∫—Å 8)
        setSearchingDown(true); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
      } else {
        // –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:', newResults);
      }
    }
  };

  const steps = [1, 2, 3, 4, 5];
  const currentStep = 4;

  const isTestComplete = completedTests >= totalTests;

  return (
    <div className={styles.container}>
      <div className={styles.formCard}>
        <div className={styles.stepsIndicator}>
          {steps.map((step, index) => (
            <div key={step} className={styles.stepWrapper}>
              <div className={step === currentStep ? styles.activeStep : styles.step}>
                {step}
              </div>
              {index < steps.length - 1 && <div className={styles.stepLine} />}
            </div>
          ))}
        </div>

        <h1 className={styles.title}>–¢–µ—Å—Ç –Ω–∞ —Å–ª—É—Ö</h1>

        {!isTestComplete ? (
          <>
            <div className={styles.infoBox}>
              <div className={styles.infoItem}>
                <span className={styles.infoLabel}>–£—Ö–æ:</span>
                <span className={styles.infoValue}>
                  {currentEar === 'left' ? '–õ–µ–≤–æ–µ' : '–ü—Ä–∞–≤–æ–µ'}
                </span>
              </div>
              <div className={styles.infoItem}>
                <span className={styles.infoLabel}>–ß–∞—Å—Ç–æ—Ç–∞:</span>
                <span className={styles.infoValue}>{currentFrequency} –ì—Ü</span>
              </div>
              <div className={styles.infoItem}>
                <span className={styles.infoLabel}>–ì—Ä–æ–º–∫–æ—Å—Ç—å:</span>
                <span className={styles.infoValue}>{currentDb} –¥–ë</span>
              </div>
            </div>

            <div className={styles.warningBox}>
              {/* <span className={styles.warningIcon}>üéß</span> */}
              <p className={styles.warningText}>
                {/* –°–µ–π—á–∞—Å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è <strong>{currentEar === 'left' ? '–ª–µ–≤–æ–µ' : '–ø—Ä–∞–≤–æ–µ'}</strong> —É—Ö–æ.
                <br /> */}
                –ù–∞–∂–º–∏—Ç–µ "–°–ª—ã—à—É", –∫–æ–≥–¥–∞ —É—Å–ª—ã—à–∏—Ç–µ –∑–≤—É–∫, –∏–ª–∏ "–ù–µ —Å–ª—ã—à—É", —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å.
              </p>
            </div>

            <div className={styles.testButtons}>
              <button
                type="button"
                className={`${styles.testButton} ${styles.notHeardButton}`}
                onClick={handleNotHeard}
              >
                –ù–µ —Å–ª—ã—à—É
              </button>

              <button
                type="button"
                className={`${styles.testButton} ${styles.heardButton}`}
                onClick={handleHeard}
              >
                –°–ª—ã—à—É
              </button>
            </div>

            <div className={styles.progressInfo}>
              –ü—Ä–æ–≥—Ä–µ—Å—Å: {completedTests} / {totalTests} —á–∞—Å—Ç–æ—Ç
            </div>
          </>
        ) : (
          <>
            <div className={styles.successBox}>
              <span className={styles.successIcon}>‚úì</span>
              <p className={styles.successText}>
                –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –í—Å–µ —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.
              </p>
            </div>

            <div className={styles.buttonGroup}>
              <button
                type="button"
                className={styles.backButton}
                onClick={onBack}
              >
                –ù–∞–∑–∞–¥
              </button>
              <button
                type="button"
                className={styles.submitButton}
                onClick={() => onNext(results)}
              >
                –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
              </button>
            </div>
          </>
        )}

        {!isTestComplete && (
          <div className={styles.buttonGroup}>
            <button
              type="button"
              className={styles.backButton}
              onClick={() => {
                stopSound();
                onBack();
              }}
            >
              –ù–∞–∑–∞–¥
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default HearingTest;
